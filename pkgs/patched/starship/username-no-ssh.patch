diff --git a/src/modules/username.rs b/src/modules/username.rs
index 9ce73ac0..2564e277 100644
--- a/src/modules/username.rs
+++ b/src/modules/username.rs
@@ -40,7 +40,6 @@ pub fn module<'a>(context: &'a Context) -> Option<Module<'a>> {
     let show_username = config.show_always
         || is_root // [1]
         || !is_login_user(context, &username) // [2]
-        || is_ssh_session(context) // [3]
         || ( !config.detect_env_vars.is_empty() && has_detected_env_var ); // [4]
 
     if !show_username || !has_detected_env_var {
@@ -119,11 +118,6 @@ fn is_root_user() -> bool {
     nix::unistd::geteuid() == nix::unistd::ROOT
 }
 
-fn is_ssh_session(context: &Context) -> bool {
-    let ssh_env = ["SSH_CONNECTION", "SSH_CLIENT", "SSH_TTY"];
-    ssh_env.iter().any(|env| context.get_env_os(env).is_some())
-}
-
 #[cfg(test)]
 mod tests {
 
@@ -132,62 +126,6 @@ mod tests {
     // TODO: Add tests for if root user (UID == 0)
     // Requires mocking
 
-    #[test]
-    fn ssh_with_empty_detect_env_vars() {
-        let actual = ModuleRenderer::new("username")
-            .env(super::USERNAME_ENV_VAR, "astronaut")
-            .env("SSH_CONNECTION", "192.168.223.17 36673 192.168.223.229 22")
-            // Test output should not change when run by root/non-root user
-            .config(toml::toml! {
-                [username]
-                style_root = ""
-                style_user = ""
-                detect_env_vars = []
-            })
-            .collect();
-
-        let expected = Some("astronaut in ");
-        assert_eq!(expected, actual.as_deref());
-    }
-
-    #[test]
-    fn ssh_with_matching_detect_env_vars() {
-        let actual = ModuleRenderer::new("username")
-            .env(super::USERNAME_ENV_VAR, "astronaut")
-            .env("SSH_CONNECTION", "192.168.223.17 36673 192.168.223.229 22")
-            .env("FORCE_USERNAME", "true")
-            // Test output should not change when run by root/non-root user
-            .config(toml::toml! {
-                [username]
-                style_root = ""
-                style_user = ""
-                detect_env_vars = ["FORCE_USERNAME"]
-            })
-            .collect();
-
-        let expected = Some("astronaut in ");
-        assert_eq!(expected, actual.as_deref());
-    }
-
-    #[test]
-    fn ssh_with_matching_negated_detect_env_vars() {
-        let actual = ModuleRenderer::new("username")
-            .env(super::USERNAME_ENV_VAR, "astronaut")
-            .env("SSH_CONNECTION", "192.168.223.17 36673 192.168.223.229 22")
-            .env("NEGATED", "true")
-            // Test output should not change when run by root/non-root user
-            .config(toml::toml! {
-                [username]
-                style_root = ""
-                style_user = ""
-                detect_env_vars = ["!NEGATED"]
-            })
-            .collect();
-
-        let expected = None;
-        assert_eq!(expected, actual.as_deref());
-    }
-
     #[test]
     fn no_env_variables() {
         let actual = ModuleRenderer::new("username").collect();
@@ -219,17 +157,6 @@ mod tests {
         assert_eq!(expected, actual);
     }
 
-    #[test]
-    fn ssh_wo_username() {
-        // SSH connection w/o username
-        let actual = ModuleRenderer::new("username")
-            .env("SSH_CONNECTION", "192.168.223.17 36673 192.168.223.229 22")
-            .collect();
-        let expected = None;
-
-        assert_eq!(expected, actual);
-    }
-
     #[test]
     fn current_user_not_logname() {
         let actual = ModuleRenderer::new("username")
@@ -247,57 +174,6 @@ mod tests {
         assert_eq!(expected, actual.as_deref());
     }
 
-    #[test]
-    fn ssh_connection() {
-        let actual = ModuleRenderer::new("username")
-            .env(super::USERNAME_ENV_VAR, "astronaut")
-            .env("SSH_CONNECTION", "192.168.223.17 36673 192.168.223.229 22")
-            // Test output should not change when run by root/non-root user
-            .config(toml::toml! {
-                [username]
-                style_root = ""
-                style_user = ""
-            })
-            .collect();
-        let expected = Some("astronaut in ");
-
-        assert_eq!(expected, actual.as_deref());
-    }
-
-    #[test]
-    fn ssh_connection_tty() {
-        let actual = ModuleRenderer::new("username")
-            .env(super::USERNAME_ENV_VAR, "astronaut")
-            .env("SSH_TTY", "/dev/pts/0")
-            // Test output should not change when run by root/non-root user
-            .config(toml::toml! {
-                [username]
-                style_root = ""
-                style_user = ""
-            })
-            .collect();
-        let expected = Some("astronaut in ");
-
-        assert_eq!(expected, actual.as_deref());
-    }
-
-    #[test]
-    fn ssh_connection_client() {
-        let actual = ModuleRenderer::new("username")
-            .env(super::USERNAME_ENV_VAR, "astronaut")
-            .env("SSH_CLIENT", "192.168.0.101 39323 22")
-            // Test output should not change when run by root/non-root user
-            .config(toml::toml! {
-                [username]
-                style_root = ""
-                style_user = ""
-            })
-            .collect();
-        let expected = Some("astronaut in ");
-
-        assert_eq!(expected, actual.as_deref());
-    }
-
     #[test]
     fn show_always() {
         let actual = ModuleRenderer::new("username")
